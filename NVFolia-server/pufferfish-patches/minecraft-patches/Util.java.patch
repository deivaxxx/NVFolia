--- a/net/minecraft/Util.java
+++ b/net/minecraft/Util.java
@@ -98,7 +_,7 @@
     public static final TracingExecutor DIMENSION_DATA_IO_POOL = makeExtraIoExecutor("Dimension-Data-IO-Worker-"); // Paper - Separate dimension data IO pool
     private static final TracingExecutor DOWNLOAD_POOL = makeIoExecutor("Download-", true);
     // Paper start - don't submit BLOCKING PROFILE LOOKUPS to the world gen thread
-    public static final ExecutorService PROFILE_EXECUTOR = Executors.newFixedThreadPool(2, new java.util.concurrent.ThreadFactory() {
+    public static final ExecutorService PROFILE_EXECUTOR = io.canvasmc.canvas.Config.INSTANCE.virtualThreads.profileLookupExecutor ? Executors.newVirtualThreadPerTaskExecutor() : Executors.newFixedThreadPool(2, new java.util.concurrent.ThreadFactory() { // Canvas - virtual threads
 
         private final AtomicInteger count = new AtomicInteger();
 
@@ -625,16 +_,38 @@
         return Maps.transformValues(map, mapper);
     }
 
+    // Canvas start - faster sequencing of futures for chunk structure gen
     public static <V> CompletableFuture<List<V>> sequence(List<? extends CompletableFuture<V>> futures) {
+        return sequence(futures, false);
+    }
+    public static <V> CompletableFuture<List<V>> sequence(List<? extends CompletableFuture<V>> futures, boolean useFaster) {
+    // Canvas end
         if (futures.isEmpty()) {
             return CompletableFuture.completedFuture(List.of());
         } else if (futures.size() == 1) {
             return futures.get(0).thenApply(List::of);
         } else {
             CompletableFuture<Void> completableFuture = CompletableFuture.allOf(futures.toArray(new CompletableFuture[0]));
+            if (useFaster) return sequenceFaster(futures, completableFuture); // Canvas - faster sequencing of futures for chunk structure gen
             return completableFuture.thenApply(_void -> futures.stream().map(CompletableFuture::join).toList());
         }
     }
+
+    // Canvas start - faster sequencing of futures for chunk structure gen
+    private static <V> CompletableFuture<List<V>> sequenceFaster(List<? extends CompletableFuture<V>> futures, CompletableFuture<Void> completableFuture) {
+        return completableFuture.thenCompose($ ->
+            CompletableFuture.supplyAsync(() -> {
+                    List<V> list = new java.util.ArrayList<>();
+
+                    for (CompletableFuture<V> future : futures) {
+                        list.add(future.join());
+                    }
+
+                    return list;
+                }
+            ));
+    }
+    // Canvas end
 
     public static <V> CompletableFuture<List<V>> sequenceFailFast(List<? extends CompletableFuture<? extends V>> completableFutures) {
         CompletableFuture<List<V>> completableFuture = new CompletableFuture<>();
